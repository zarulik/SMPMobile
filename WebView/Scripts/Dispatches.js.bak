var ds;
var smpMobileApi;
$(document).ready(function() {
  smpMobileApi = new SMPMobileAPI();
  ds = new DispatchesPage();
});

class DispatchesPage {
  constructor() {
    this.InitializeControls();
  }
  InitializeControls() {
    RemoveCacheValue(CacheIds.selectedTaskDispatch);
    this.CheckLogin(this, function(that) {
      that.InitializeMenu();
      that.InitializeDispatches();
    });
  }

  CheckLogin(that, success) {
    smpMobileApi.Login(
      SMPMobileAPI.company,
      SMPMobileAPI.username,
      SMPMobileAPI.password,
      function(res) {
        if (res) {
          SetCacheValue(CacheIds.token,res);
          success(that);
        } else {
          window.location.replace("../Index.html");
        }
      },
      function(err) {
        window.location.replace("../Index.html");
      }
    );
  }
  InitializeMenu() {
    $("#toggleMenu").click(function() {
      console.log("click toggle");
      $(".toggle-menu-inner").css("top", $("nav")[0].scrollHeight + 2 + "px");
      $("#toggle-menu").show();
      $("#toggle-menu").off('click').click(function() {
        $("#toggle-menu").hide();
      });
    });
    $("#signOutBtn").click(function(e) {
      RemoveCacheValue(CacheIds.token);
      window.location.replace("../Index.html");
      e.preventDefault();
    });
    $('#settingsPage').click(function(e){
      SetCacheValue(CacheIds.previousPage,"../Pages/Dispatches.html");
      window.location.replace("../Pages/Settings.html");
      e.preventDefault();
    });
  }

  InitializeDispatches() {
    var maxHeight = $(window.top).height() - $(".navbar").outerHeight() -  20;
    $("#dispatchesContainer").css("max-height",(maxHeight > 200 ? maxHeight : 200) + "px");
    var pageModel = {
      ajaxCounter: 5,
      ajaxFailedCounter: 0,
      allLoaded: function() {
        if (pageModel.ajaxCounter == 0) {
          for (var i = 0; i < pageModel.dispatches.length; i++) {
            var dispatchStatus = FindRowByFieldNameValuePair(
              pageModel.taskStatuses,
              "StatusCode",
              pageModel.dispatches[i].StatusCode
            );
            var $dispatchView = ds.CreateDispatchView(pageModel.dispatches[i],dispatchStatus);
            var taskInfo = FindRowByFieldNameValuePair(
              pageModel.taskInfos,
              "TaskNo",
              pageModel.dispatches[i].TaskNo
            );
            var taskType = FindRowByFieldNameValuePair(
              pageModel.taskTypes,
              "TypeCode",
              taskInfo.TaskType
            );
            var taskStatus = FindRowByFieldNameValuePair(
              pageModel.taskStatuses,
              "StatusCode",
              taskInfo.TaskStatus
            );
            var natureOfTask = FindRowByFieldNameValuePair(
              pageModel.natureOfTasks,
              "NatureOfTask",
              taskInfo.NatureOfTask
            );
            $dispatchView.appendTo("#dispatchesContainer");
            ds.InitializeDispatchEvents(
              pageModel.dispatches[i],
              taskInfo,
              taskType,
              taskStatus,
              natureOfTask
            );
          }
          $('.loadingIcon').css('animation-play-state','paused')
          $('.loading').toggleClass('d-none');
          $('#dispatchesContainer').toggleClass('d-none');
        }
        else if(pageModel.ajaxCounter  - pageModel.ajaxFailedCounter == 0)
        {
          
        }
      },
      dispatches: null,
      taskInfos: null,
      taskStatuses: null,
      taskTypes: null,
      natureOfTasks: null
    };
    smpMobileApi.GetTechnicianDispatchesPreviews(
      function(dispatches) {
        pageModel.dispatches = dispatches;
        pageModel.ajaxCounter--;
        pageModel.allLoaded();
      },
      function(error) {
        pageModel.ajaxFailedCounter++;
        smpMobileApi.ShowModal(
          "Issue",
          "Issue during loading dispatches",
          "danger",
          5000
        );
      }
    );
    smpMobileApi.GetTechnicianTasksInfo(
      function(tasksInfos) {
        pageModel.taskInfos = tasksInfos;
        pageModel.ajaxCounter--;
        pageModel.allLoaded();
      },
      function(error) {
        pageModel.ajaxFailedCounter++;
        smpMobileApi.ShowModal(
          "Issue",
          "Issue during loading tasks information",
          "danger",
          5000
        );
      }
    );
    smpMobileApi.GetNatureOfTasks(
        function(natureOfTasksInfo) {
          pageModel.natureOfTasks = natureOfTasksInfo;
          pageModel.ajaxCounter--;
          pageModel.allLoaded();
        },
        function(error) {
          pageModel.ajaxFailedCounter++;
          smpMobileApi.ShowModal(
            "Issue",
            "Issue during loading nature of tasks",
            "danger",
            5000
          );
        }
      );
      smpMobileApi.GetTaskDispatchStatuses(
        function(taskStatuses) {
          pageModel.taskStatuses = taskStatuses;
          pageModel.ajaxCounter--;
          pageModel.allLoaded();
        },
        function(error) {
          pageModel.ajaxFailedCounter++;
          smpMobileApi.ShowModal(
            "Issue",
            "Issue during loading tasks statuses",
            "danger",
            5000
          );
        }
      );
      smpMobileApi.GetTaskTypes(
        function(taskTypes) {
          pageModel.taskTypes = taskTypes;
          pageModel.ajaxCounter--;
          pageModel.allLoaded();
        },
        function(error) {
          pageModel.ajaxFailedCounter++;
          smpMobileApi.ShowModal(
            "Issue",
            "Issue during loading tasks types",
            "danger",
            5000
          );
        }
      );
  }

  InitializeDispatchEvents(dispatch, taskInfo,taskType,taskStatus,natureOfTask) {
    $("#" + dispatch.TaskNo + "_" + dispatch.DispatchNo).click(function() {
      SetCacheValue(CacheIds.selectedTaskDispatch,dispatch.TaskNo + "_" + dispatch.DispatchNo);
      window.location.href = "Dispatch.html";
    });
    if (taskInfo) {
      $("#" + dispatch.TaskNo + "_" + dispatch.DispatchNo + "_TaskInfo").click(
        function(e) {
          $("#taskInfo_TaskNo").text("");
          $("#taskInfo_Type").text("");
          $("#taskInfo_Status").text("");
          $("#taskInfo_Desc").text("");
          $("#taskInfo_ContractNo").text("");
          $("#taskInfo_NatureOfTask").text("");
          $("#taskInfo_NatureOfTaskQuestion1").text("");
          $("#taskInfo_NatureOfTaskAnswer1").text("");
          $("#taskInfo_NatureOfTaskQuestion2").text("");
          $("#taskInfo_NatureOfTaskAnswer2").text("");
          $("#taskInfo_NatureOfTaskQuestion3").text("");
          $("#taskInfo_NatureOfTaskAnswer3").text("");
          $("#taskInfo_NatureOfTaskQuestion4").text("");
          $("#taskInfo_NatureOfTaskAnswer4").text("");
          $("#taskInfo_NatureOfTaskQuestion5").text("");
          $("#taskInfo_NatureOfTaskAnswer5").text("");
          $("#iig_extendedDescriptionText").text("");
          $("#taskInfo_TaskNo").text(taskInfo.TaskNo);
          $("#taskInfo_Type").text(taskType.Description);
          $("#taskInfo_Status").text(taskStatus.Description);
          $("#taskInfo_Desc").text(taskInfo.TaskDescription);
          $("#taskInfo_ContractNo").text(taskInfo.ContractNo);
          if (natureOfTask) {
          var anyQuestion = false;
          if (natureOfTask.Description) {
              $("#taskInfo_NatureOfTask").text(
              natureOfTask.Description
              );
              $("#exd_natureOfTask").show();
          } else {
              $("#exd_natureOfTask").hide();
          }
          if (natureOfTask.Question1) {
              $("#taskInfo_NatureOfTaskQuestion1").text(
              natureOfTask.Question1
              );
              $("#taskInfo_NatureOfTaskAnswer1").text(
                taskInfo.NatureOfTaskAnswer1
              );
              $("#exd_natureOfTaskQuestion1").show();
              anyQuestion = true;
          } else {
              $("#exd_natureOfTaskQuestion1").hide();
          }
          if (natureOfTask.Question2) {
              $("#taskInfo_NatureOfTaskQuestion2").text(
              natureOfTask.Question2
              );
              $("#taskInfo_NatureOfTaskAnswer2").text(
                taskInfo.NatureOfTaskAnswer2
              );
              $("#exd_natureOfTaskQuestion2").show();
              anyQuestion = true;
          } else {
              $("#exd_natureOfTaskQuestion2").hide();
          }
          if (natureOfTask.Question3) {
              $("#taskInfo_NatureOfTaskQuestion3").text(
              natureOfTask.Question3
              );
              $("#taskInfo_NatureOfTaskAnswer3").text(
                taskInfo.NatureOfTaskAnswer3
              );
              $("#exd_natureOfTaskQuestion3").show();
              anyQuestion = true;
          } else {
              $("#exd_natureOfTaskQuestion3").hide();
          }
          if (natureOfTask.Question4) {
              $("#taskInfo_NatureOfTaskQuestion4").text(
              natureOfTask.Question4
              );
              $("#taskInfo_NatureOfTaskAnswer4").text(
                taskInfo.NatureOfTaskAnswer4
              );
              $("#exd_natureOfTaskQuestion4").show();
              anyQuestion = true;
          } else {
              $("#exd_natureOfTaskQuestion4").hide();
          }
          if (natureOfTask.Question5) {
              $("#taskInfo_NatureOfTaskQuestion5").text(
              natureOfTask.Question5
              );
              $("#taskInfo_NatureOfTaskAnswer5").text(
                taskInfo.NatureOfTaskAnswer5
              );
              $("#exd_natureOfTaskQuestion5").show();
              anyQuestion = true;
          } else {
              $("#exd_natureOfTaskQuestion5").hide();
          }
          if (anyQuestion) {
              $("#exd_natureOfTask_questionHeader").show();
          } else {
              $("#exd_natureOfTask_questionHeader").hide();
          }
          }
          $("#iig_extendedDescriptionText").text(taskInfo.ExtendedDescription);
          if (taskInfo.ExtendedDescription) {
          $("#exd_description_div").show();
          } else {
          $("#exd_description_div").hide();
          }
          $("#taskInfoModal").modal();
          e.stopPropagation();
        }
      );
      $(
        "#" + dispatch.TaskNo + "_" + dispatch.DispatchNo + "_CustomerInfo"
      ).click(function(e) {
        $("#CustNo").text("");
        $("#BillToName").text("");
        $("#BillToAddr").text("");
        $("#BillToCity").text("");
        $("#ShipToName").text("");
        $("#ShipToAddr").text("");
        $("#ShipToCity").text("");
        $("#CreditLimit").text("");
        $("#AR_Balance").text("");
        $("#OpenOrderAmt").text("");
        $("#OverBy").text("");
        $("#CustMap").attr("src", "");

        $("#CustNo").text(taskInfo.ARDivisionNo + "-" + taskInfo.CustomerNo);
        $("#BillToName").text(taskInfo.BillToName);
        $("#BillToAddr").text(taskInfo.BillToAddress);
        $("#BillToCity").text(taskInfo.BillToCity);
        $("#ShipToName").text(taskInfo.ShipToName);
        $("#ShipToAddr").text(taskInfo.ShipToAddress);
        $("#ShipToCity").text(taskInfo.ShipToCity);
        $("#CreditLimit").text(taskInfo.CreditLimit.toFixed(2));
        $("#AR_Balance").text(taskInfo.ArBalance.toFixed(2));
        $("#OpenOrderAmt").text(taskInfo.OpenOrderAmt.toFixed(2));
        $("#OverBy").text(taskInfo.OverBy.toFixed(2));
        $(".ShipToAddr-link").attr("href", "https://maps.google.com/?q=" + taskInfo.ShipToAddress+" "+taskInfo.ShipToCity);
        $(".BillToAddr-link").attr("href", "https://maps.google.com/?q=" + taskInfo.BillToAddress+" "+taskInfo.BillToCity);
        if(!SMPMobileAPI.IsMobileVersion)
        {
          $(".ShipToAddr-link").attr("target", "_blank");
          $(".BillToAddr-link").attr("target", "_blank");
        }
        $("#customerInfoModal").modal();
        e.stopPropagation();
      });
    }
  }

  CreateDispatchView(dispatch,dispatchStatus) {
    var $dispatchView = $("<div>")
      .addClass("col-10 col-sm-10 col-md-4 col-lg-3 col-xl-3 dispatchBox")
      .css("background-color", ds.GetDispatchBoxColor(dispatchStatus.Description))
      .css("color", ds.GetDispatchBoxFontColor(dispatchStatus.Description))
      .attr("id", dispatch.TaskNo + "_" + dispatch.DispatchNo);
    var $dispatchHeader = $("<div>").addClass("dispatchHeader");
    $dispatchHeader.append(
      "<p> Task No: " +
        dispatch.TaskNo +
        '<span id="dispatchButtonsSpan" class="float-right">' +
        '<span id="' +
        dispatch.TaskNo +
        "_" +
        dispatch.DispatchNo +
        '_TaskInfo" class="dispatchButtons"><i class="fas fa-clipboard-list fa-2x"></i></span>' +
        '<span id="' +
        dispatch.TaskNo +
        "_" +
        dispatch.DispatchNo +
        '_CustomerInfo" class="dispatchCustomerInfo dispatchButtons"><i class="fas fa-address-book fa-2x"></i></span>' +
        "</span></p>"
    );
    $dispatchView.append($dispatchHeader);
    var $dispatchBody = $("<div>").addClass("dispatchBody");
    $dispatchBody.append("<p> Dispatch No: " + dispatch.DispatchNo + "</p>");
    $dispatchBody.append(
      "<p> Date: " + GetDatePartOfDate(dispatch.DispatchDate) + "</p>"
    );
    $dispatchBody.append(
      "<p> Description:</br> " + dispatch.TaskDescription + "</p>"
    );
    $dispatchBody.append("<p> Customer: " + dispatch.Customer + "</p>");
    $dispatchBody.append(
      "<p> Ship To Name:</br> " + dispatch.ShipToName + "</p>"
    );
    $dispatchBody.append(
      "<p> Start Date: " +
        GetDatePartOfDate(dispatch.StartDate) +
        " " +
        GetFormattedTime(dispatch.StartTime) +
        "</p>"
    );
    $dispatchBody.append(
      "<p> End Date: " +
        GetDatePartOfDate(dispatch.EndDate) +
        " " +
        GetFormattedTime(dispatch.EndTime) +
        "</p>"
    );
    $dispatchView.append($dispatchBody);
    $dispatchView.append(
      '<p class="dispatchStatusBar"> Status: ' + dispatchStatus.Description + "</p>"
    );
    return $dispatchView;
  }
  GetDispatchBoxColor(status) {
    switch (status) {
      case "Open":
        return "#3c8dbc";
      case "Hold":
        return "#ED8013";
      case "Closed":
        return "#FC0000";
      case "Entered":
        return "#239906";
      default:
        return "#3c8dbc";
    }
  }
  GetDispatchBoxFontColor(status) {
    switch (status) {
      case "Open":
        return "#FFFFFF";
      case "Hold":
        return "#FFFFFF";
      case "Closed":
        return "#FFFFFF";
      case "Entered":
        return "#FFFFFF";
      default:
        return "#FFFFFF";
    }
  }
}
